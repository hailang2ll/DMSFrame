<%@ CodeTemplate Language="C#" TargetLanguage="C#" ResponseEncoding="UTF-8" Description="Generates a very simple business object." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="Context" Description="Table that the object is based on." %>
<%@ Property Name="Namespace" Type="System.String" Category="Context"   Default="CSTJR.Entity.DBEntity" Description="Namespace that class belongs to." %>
<%@ Property Name="DataBaseName" Type="System.String" Category="Context"   Default="WALIUJR_PRODUCT" Description="Namespace that class belongs to." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="System.Net" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Net" %>

//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by CodeSmith Template.
//     Creater: dylan
//     Date:    <%= DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString() %>
//     Version: 2.0.0.0
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using DMSFrame;
namespace <%= Namespace.Trim()==""?"CSTJR.Entity.DBEntity":Namespace %>
{	
	/// <summary>
    /// <%=SourceTable.ExtendedProperties["CS_Description"].Value.ToString().Replace("\r\n", ";").Replace("\n", ";")%>
	/// </summary>
	[Serializable]
	[TableMapping(Name = "<%= GetClassName(SourceTable) %>", PrimaryKey = "<%= GetPrimaryKeyName(SourceTable) %>")]
	public class <%= GetClassName(SourceTable) %> : BaseEntity
	{
		
		#region Private Properties
		
		<% foreach (ColumnSchema column in SourceTable.Columns) { %>
		<%= GetMemberVariableDeclarationStatement(column) %>//<%= column.ExtendedProperties["CS_Description"].Value.ToString().Replace("\r\n", ";").Replace("\n", ";") %>
		<% } %>
		
		#endregion		
		
		#region Public Properties
		
		<% for (int i = 0; i < SourceTable.PrimaryKey.MemberColumns.Count; i++) { %>
		<% ColumnSchema column = SourceTable.PrimaryKey.MemberColumns[i]; %>		
		/// <summary>
		/// <%= column.ExtendedProperties["CS_Description"].Value.ToString().Replace("\r\n", ";").Replace("\n", ";") %>.
		/// </summary>
		[ColumnMapping(Name = "<%= GetPropertyName(column) %>"<% if ((bool)column.ExtendedProperties["CS_IsIdentity"].Value) { %>,AutoIncrement = true<% } %>)]
		public <%= GetCSharpVariableType(column) == "string" ? GetCSharpVariableType(column) : GetCSharpVariableType(column) + "?" %> <%= GetPropertyName(column) %>
		{
			get { return <%= GetMemberVariableName(column) %>; }
			set { <% if (column.SystemType == typeof(string) && column.NativeType != "text" && column.NativeType != "ntext" && column.Size > 0) { %>this.OnBasePropertyChanged("<%= GetPropertyName(column) %>", <%= column.Size  %>, value, ref <%= GetMemberVariableName(column) %>);<% }else { %>this.OnBasePropertyChanged<<%= GetCSharpVariableType(column) == "string" ? GetCSharpVariableType(column) : GetCSharpVariableType(column) + "?" %>>("<%= GetPropertyName(column) %>", value, ref <%= GetMemberVariableName(column) %>);<% } %>	}
		}
		<% }%>
		
		<% for (int i = 0; i < SourceTable.NonPrimaryKeyColumns.Count; i++) { %>		
		<% ColumnSchema column = SourceTable.NonPrimaryKeyColumns[i]; %>
		/// <summary>
		/// <%= column.ExtendedProperties["CS_Description"].Value.ToString().Replace("\r\n", ";").Replace("\n", ";") %>.
		/// </summary>
		[ColumnMapping(Name = "<%= GetPropertyName(column) %>"<% if ((bool)column.ExtendedProperties["CS_IsIdentity"].Value) { %>,AutoIncrement = true<% } %><% if(GetSqlDbType(column)=="Text" || GetSqlDbType(column)=="NText" || column.Size==-1){%>,Size=-1<% } %>)<% if (GetPropertyName(column)=="CreateBy"||GetPropertyName(column)=="UpdateBy"||GetPropertyName(column)=="DeleteFlag"||GetPropertyName(column)=="DeleteTime"||GetPropertyName(column)=="DeleteBy"||GetPropertyName(column)=="CreateName"){%>, Newtonsoft.Json.JsonIgnore<%} %>]
		<% if (column.IsForeignKeyMember) { %>
		public <%= GetClassName(GetForeignKeyTable(column)) %> <%= GetClassName(GetForeignKeyTable(column)) %>
		{
			get { return <%= GetMemberVariableName(column) %>; }
			set { <% if (column.SystemType == typeof(string) && column.NativeType != "text" && column.NativeType != "ntext" && column.Size > 0) { %>this.OnBasePropertyChanged("<%= GetPropertyName(column) %>", <%= column.Size  %>, value, ref <%= GetMemberVariableName(column) %>);<% }else { %>this.OnBasePropertyChanged<<%= GetCSharpVariableType(column) == "string" ? GetCSharpVariableType(column) : GetCSharpVariableType(column) + "?" %>>("<%= GetPropertyName(column) %>", value, ref <%= GetMemberVariableName(column) %>);<% } %>	}
		}
		<% } else { %>
		<% string strColLength = GetColLengthString(column); %>
		public <%= GetCSharpVariableType(column) == "string" ? GetCSharpVariableType(column) : GetCSharpVariableType(column) + "?" %> <%= GetPropertyName(column) %>
		{
			get { return <%= GetMemberVariableName(column) %>; }
			set { <% if (column.SystemType == typeof(string) && column.NativeType != "text" && column.NativeType != "ntext" && column.Size > 0) { %>this.OnBasePropertyChanged("<%= GetPropertyName(column) %>", <%= column.Size  %>, value, ref <%= GetMemberVariableName(column) %>);<% }else { %>this.OnBasePropertyChanged<<%= GetCSharpVariableType(column) == "string" ? GetCSharpVariableType(column) : GetCSharpVariableType(column) + "?" %>>("<%= GetPropertyName(column) %>", value, ref <%= GetMemberVariableName(column) %>);<% } %>	}
		}
		<% } %>		
		<% if (i < SourceTable.NonPrimaryKeyColumns.Count - 1) Response.Write("\r\n"); %>		
		<% } %>
		
		#endregion       
        
	}
}


<script runat="template">

<!-- #include file="CSTJRGen.inc" -->

private string GetColLengthString(ColumnSchema column)
{
	string strRet = "";
	if (column.DataType == DbType.AnsiString || column.DataType == DbType.AnsiStringFixedLength ||
	    column.DataType == DbType.String || column.DataType == DbType.StringFixedLength ||
	    column.DataType == DbType.Binary)
	{
		strRet += ", Length=" + column.Size.ToString();
	}
	return strRet;
}

</script>