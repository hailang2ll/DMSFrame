<%@ CodeTemplate Language="C#" TargetLanguage="C#" ResponseEncoding="UTF-8" Description="Generates a very simple business object." %>
<%@ Property Name="SourceView" Type="SchemaExplorer.ViewSchema" Category="Context" Description="Table that the object is based on." %>
<%@ Property Name="Namespace" Type="System.String" Category="Context"   Default="CSTJR.Entity.ViewEntity" Description="Namespace that class belongs to." %>
<%@ Property Name="DataBaseName" Type="System.String" Category="Context"   Default="WALIUJR_PRODUCT" Description="Namespace that class belongs to." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="System.Net" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Net" %>

//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by CodeSmith Template.
//     Creater: dylan
//     Date:    <%= DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString() %>
//     Version: 2.0.0.0
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using DMSFrame;
namespace <%= Namespace==""?"CSTJR.Entity.ViewEntity":Namespace %>
{
	[Serializable]
	[TableMapping(Name = "<%= GetClassName(SourceView) %>",ConfigName = "<%= DataBaseName.Trim() %>")]
	/// <summary>
	/// Modal class: <%= GetClassName(SourceView) %>.
	/// </summary>
	public class <%= GetClassName(SourceView) %> : BaseEntity
	{
		
		#region Private Properties
		
		<% foreach (ViewColumnSchema column in SourceView.Columns) { %>
		<%= GetMemberVariableDeclarationStatement(column) %>
		<% } %>

		
		<% for (int i = 0; i < SourceView.Columns.Count; i++) { %>
		<% ViewColumnSchema column = SourceView.Columns[i]; %>
		/// <summary>
        /// 
        /// </summary>
		<% string strColLength = GetColLengthString(column); %>
		[ColumnMapping(Name = "<%= GetPropertyName(column) %>")]
		public <%=  GetCSharpVariableType(column) == "string" ? GetCSharpVariableType(column) : GetCSharpVariableType(column) + "?" %> <%= GetPropertyName(column) %>
		{
		    get { return <%= GetMemberVariableName(column) %>; }
			set { <% if (column.SystemType == typeof(string) && column.NativeType != "text" && column.NativeType != "ntext" && column.Size > 0) { %>this.OnBaseMappingPropertyChanged("<%= GetPropertyName(column) %>", <%= column.Size  %>, value, ref <%= GetMemberVariableName(column) %>);<% }else { %>this.OnBaseMappingPropertyChanged<<%= GetCSharpVariableType(column) == "string" ? GetCSharpVariableType(column) : GetCSharpVariableType(column) + "?" %>>("<%= GetPropertyName(column) %>", value, ref <%= GetMemberVariableName(column) %>);<% } %>	}
		}
		<% if (i < SourceView.Columns.Count - 1) Response.Write("\r\n"); %>		
		<% } %>
		
		#endregion

	}
}


<script runat="template">

<!-- #include file="CSTJRGen.inc" -->

private string GetColLengthString(ViewColumnSchema column)
{
	string strRet = "";
	if (column.DataType == DbType.AnsiString || column.DataType == DbType.AnsiStringFixedLength ||
	    column.DataType == DbType.String || column.DataType == DbType.StringFixedLength ||
	    column.DataType == DbType.Binary)
	{
		strRet += ", Length=" + column.Size.ToString();
	}
	return strRet;
}

</script>