<%@ CodeTemplate Language="C#" TargetLanguage="C#" ResponseEncoding="UTF-8" Description="Generates a very simple business object." %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.CommandSchema" Category="Context" Description="Proc that the object is based on." %>
<%@ Property Name="Namespace" Type="System.String" Category="Context"   Default="CSTJR.Entity.ProcEntity" Description="Namespace that class belongs to." %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="System.Data" %>
<%@ Assembly Name="System.Net" %>
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="System.Data" %>
<%@ Import Namespace="System.Net" %>

//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by CodeSmith Template.
//     Creater: dylan
//     Date:    <%= DateTime.Now.ToShortDateString() + " " + DateTime.Now.ToShortTimeString() %>
//     Version: 2.0.0.0
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using DMSFrame;

/// <summary>
/// 
/// </summary>
namespace <%= Namespace.Trim()==""?"CSTJR.Entity.ProcEntity":Namespace %>
{	
	/// <summary>
    /// 
	/// </summary>
	[Serializable]
	[StoredProcedureMapping(Name = "<%= GetClassName(SourceTable) %>",DMSDbType = DMSDbType.MsSql)]
	public class <%= GetClassName(SourceTable) %> : SPEntity
	{
		
		#region Private Properties
		
	    <% foreach (ParameterSchema param in SourceTable.InputParameters) { %>
		<%= GetMemberVariableDeclarationStatement(param) %>  // input parameter
		<% } %>
        
		 <% foreach (ParameterSchema param in SourceTable.InputOutputParameters) { %>
		<%= GetMemberVariableDeclarationStatement(param) %> // output parameter
		<% } %>
		#endregion		
		
		#region Public Properties
		<% foreach (ParameterSchema param in SourceTable.InputParameters) { %>
		/// <summary>
		/// <%= param.Name.Replace("\n", ";") %> input parameter <%= GetMemberVariableDefaultValue(param) %>.
		/// </summary>
        public <%= GetCSharpVariableType(param) == "string" ? GetCSharpVariableType(param) : GetCSharpVariableType(param) + "?" %> <%=GetPropertyName(param) %>
        {
            get { return <%= GetMemberVariableName(param) %>; }
            set 
            {            
                object _oldvalue = <%= GetMemberVariableName(param) %>;
                <% if (param.SystemType == typeof(string) && param.NativeType != "text") { %>
				<% if (param.Size>0) { %>
				<%= GetMemberVariableName(param) %> = value.SubStr(<%=param.Size %>);
				<% } else { %>
				<%= GetMemberVariableName(param) %> = value;
				<% } %>
				<% } else { %>
				<%= GetMemberVariableName(param) %> = value;
				<% } %>
                if ((value == null) || (!value.Equals(_oldvalue)))
				{
					this.OnMappingPropertyChanged("<%= GetPropertyName(param) %>", _oldvalue, <%= GetMemberVariableName(param) %>);					
				}
            }
        }
		<% } %>
        
		<% foreach (ParameterSchema param in SourceTable.InputOutputParameters) { %>
		/// <summary>
		/// <%= param.Name.Replace("\n", ";") %>   output parameter.
		/// </summary>
        public <%= GetCSharpVariableType(param) == "string" ? GetCSharpVariableType(param) : GetCSharpVariableType(param) + "?" %> <%=GetPropertyName(param) %>
        {
            get { return <%= GetMemberVariableName(param) %>; }
            set 
            {            
                object _oldvalue = <%= GetMemberVariableName(param) %>;
                <% if (param.SystemType == typeof(string) && param.NativeType != "text") { %>
				<% if (param.Size>0) { %>
				<%= GetMemberVariableName(param) %> = value.SubStr(<%=param.Size %>);
				<% } else { %>
				<%= GetMemberVariableName(param) %> = value;
				<% } %>
				<% } else { %>
				<%= GetMemberVariableName(param) %> = value;
				<% } %>
                if ((value == null) || (!value.Equals(_oldvalue)))
				{
					this.OnMappingPropertyChanged("<%= GetPropertyName(param) %>", _oldvalue, <%= GetMemberVariableName(param) %>);					
				}
            }
        }
		<% } %>
		#endregion       
        
	}
}


<script runat="template">

<!-- #include file="CSTJRGen.inc" -->

private string GetColLengthString(ColumnSchema column)
{
	string strRet = "";
	if (column.DataType == DbType.AnsiString || column.DataType == DbType.AnsiStringFixedLength ||
	    column.DataType == DbType.String || column.DataType == DbType.StringFixedLength ||
	    column.DataType == DbType.Binary)
	{
		strRet += ", Length=" + column.Size.ToString();
	}
	return strRet;
}

</script>